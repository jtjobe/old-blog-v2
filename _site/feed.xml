<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Beyond Ruby Basics</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-03-30T08:44:28-04:00</updated>
<id>/</id>
<author>
  <name>J.T. Jobe</name>
  <uri>/</uri>
  <email>jtjobe@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Use Select to Get Array of Collection Subset]]></title>
  <link rel="alternate" type="text/html" href="/use-select-to-get-array-of-collection-subset/" />
  <id>/use-select-to-get-array-of-collection-subset</id>
  <published>2016-03-30T00:00:00-04:00</published>
  <updated>2016-03-30T00:00:00-04:00</updated>
  <author>
    <name>J.T. Jobe</name>
    <uri></uri>
    <email>jtjobe@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;One of the biggest and easiest improvements to my code in my first year as a RoR developer&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/use-select-to-get-array-of-collection-subset/&quot;&gt;Use Select to Get Array of Collection Subset&lt;/a&gt; was originally published by J.T. Jobe at &lt;a href=&quot;&quot;&gt;Beyond Ruby Basics&lt;/a&gt; on March 30, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Refactor Multi-Way Ifs with Case Statements for Readability]]></title>
  <link rel="alternate" type="text/html" href="/case-expression-instead-of-multi-way-if-statement/" />
  <id>/case-expression-instead-of-multi-way-if-statement</id>
  <published>2016-03-29T00:00:00-04:00</published>
  <updated>2016-03-29T00:00:00-04:00</updated>
  <author>
    <name>J.T. Jobe</name>
    <uri></uri>
    <email>jtjobe@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;If you’re not using case statements, you should be.&lt;/p&gt;

&lt;p&gt;David Thomas, author of Programming Ruby, calls the case expression “a powerful beast: a multiway if on steroids” (1).&lt;/p&gt;

&lt;p&gt;In less colorful words: anytime you have a long, messy if/else statement you might want to consider using a case expression instead.&lt;/p&gt;

&lt;p&gt;Take the following three code snippets:&lt;/p&gt;

&lt;h4 id=&quot;messy-ifelse-statement&quot;&gt;1) Messy If/Else Statement&lt;/h4&gt;

&lt;noscript&gt;&lt;pre&gt;sports = %w{ football soccer basketball baseball volleyball }

game = sports.sample

if game == &amp;#39;football&amp;#39;
  puts &amp;quot;touchdown&amp;quot;
elsif game == &amp;#39;soccer&amp;#39;
  puts &amp;quot;goal&amp;quot;
elsif game == &amp;#39;basketball&amp;#39;
  puts &amp;quot;basket&amp;quot;
elsif game == &amp;#39;baseball&amp;#39;
  puts &amp;quot;run&amp;quot;
elsif game == &amp;quot;volleyball&amp;quot;
  puts &amp;quot;point&amp;quot;
end
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jtjobe/4f07f28dc7b28aadda137bf38598eb7a.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;refactored-with-case-statement&quot;&gt;2) Refactored with Case Statement&lt;/h4&gt;

&lt;noscript&gt;&lt;pre&gt;sports = %w{ football soccer basketball baseball volleyball }

case sports.sample
  when &amp;#39;football&amp;#39;
    puts &amp;quot;touchdown&amp;quot;
  when &amp;#39;soccer&amp;#39;
    puts &amp;quot;goal&amp;quot;
  when &amp;#39;basketball&amp;#39;
    puts &amp;quot;basket&amp;quot;
  when &amp;#39;baseball&amp;#39;
    puts &amp;quot;run&amp;quot;
  when &amp;quot;volleyball&amp;quot;
    puts &amp;quot;point&amp;quot;
end&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jtjobe/a5268be86f30a07d1d130724f7feeb3e.js&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;refactored-to-one-line-expressions&quot;&gt;3) Refactored to One-Line Expressions&lt;/h4&gt;

&lt;noscript&gt;&lt;pre&gt;sports = %w{ football soccer basketball baseball volleyball }

case sports.sample
  when &amp;#39;football&amp;#39; then puts &amp;quot;touchdown&amp;quot;
  when &amp;#39;soccer&amp;#39; then puts &amp;quot;goal&amp;quot;
  when &amp;#39;basketball&amp;#39; then puts &amp;quot;basket&amp;quot;
  when &amp;#39;baseball&amp;#39; then puts &amp;quot;run&amp;quot;
  when &amp;quot;volleyball&amp;quot; then puts &amp;quot;point&amp;quot;
end&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/jtjobe/a7945c4836514208e76ef5f42dcd2dbd.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;simple-but-powerful&quot;&gt;Simple but Powerful&lt;/h2&gt;

&lt;p&gt;The code above is simple enough that quickly making sense of what’s happening in the multiway if isn’t difficult. However, in more complex use cases this same refactoring can be the difference between easy to read self-documenting code and an unclear mess that takes extra time to decipher.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Thomas, David. Programming Ruby. Raleigh, N.C.: Pragmatic Bookshelf, 2005.&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;/case-expression-instead-of-multi-way-if-statement/&quot;&gt;Refactor Multi-Way Ifs with Case Statements for Readability&lt;/a&gt; was originally published by J.T. Jobe at &lt;a href=&quot;&quot;&gt;Beyond Ruby Basics&lt;/a&gt; on March 29, 2016.&lt;/p&gt;
  </content>
</entry>

</feed>
